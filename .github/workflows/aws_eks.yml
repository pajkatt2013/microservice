name: Deploy to Amazon EKS

on:
  push:
    branches: [main]
    paths: .github/workflows/aws_simple.yml

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: terry_eks_cluster # Replace with your desired EKS cluster name
  SERVICES: auth converter gateway mysql mongodb notification rabbit
  SERVICES_WITH_DOCKERFILE: auth converter gateway notification
  MY_AWS_ACCOUNT_ID: 727389700154
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  deploy:
    name: Setup and Deploy Microservices to EKS
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Check and Create EKS Cluster if Not Exists
      - name: Check and Create EKS Cluster
        run: |
          CLUSTER_STATUS=$(aws eks describe-cluster --name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }} --query 'cluster.status' --output text || echo "MISSING")

          if [ "$CLUSTER_STATUS" == "MISSING" ] || [ "$CLUSTER_STATUS" == "" ]; then
            echo "Cluster '${{ env.CLUSTER_NAME }}' does not exist. Creating it..."
            aws eks create-cluster \
              --name ${{ env.CLUSTER_NAME }} \
              --role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/eks-cluster-role \
              --resources-vpc-config subnetIds=subnet-12345,securityGroupIds=sg-12345
          else
            echo "Cluster '${{ env.CLUSTER_NAME }}' already exists with status: $CLUSTER_STATUS."
          fi

      # Step 4: Update kubeconfig for EKS
      - name: Update kubeconfig for EKS
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.CLUSTER_NAME }}

      # Step 5: Ensure Kubernetes Connection
      - name: Verify Kubernetes Connection
        run: |
          kubectl get nodes

      # Step 6: Replace Tokens in Manifests
      - uses: cschleiden/replace-tokens@v1
        with:
          files: '["./python/src/notification/manifests/secret.yaml"]'
          tokenPrefix: __ # optional, default is #{
          tokenSuffix: __ # optional, default is }#
        env:
          MAIL163_ADDRESS: ${{ secrets.MAIL163_ADDRESS }}
          MAIL163_PASSWORD: ${{ secrets.MAIL163_PASSWORD }}

      # Step 7: Apply Kubernetes Manifests
      - name: Apply Kubernetes Manifests
        run: |
          for SERVICE in ${{ env.SERVICES }}; do
            echo "Applying manifests for service: $SERVICE"
            kubectl apply -f ./python/src/$SERVICE/manifests/
          done
