name: Deploy to AWS Fargate SIMPLE

on:
  push:
    branches: [main]
    paths: .github/workflows/aws_simple.yml

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  CLUSTER_NAME: terry_ecs_cluster # Replace with your desired ECS cluster name
  SERVICES: auth converter gateway mysql mongodb notification rabbit
  SERVICES_WITH_DOCKERFILE: auth converter gateway notification
  MY_AWS_ACCOUNT_ID: 727389700154
  IMAGE_TAG: ${{ github.run_number }}

jobs:
  deploy:
    name: Setup and Deploy Microservices to Fargate
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS CLI
      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 3: Create ECS Cluster (If Not Exists)
      - name: Create ECS Cluster
        run: |
          echo "Checking if ECS Cluster '${{ env.CLUSTER_NAME }}' exists..."
          if ! aws ecs describe-clusters --clusters ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }}; then
            echo "Cluster not found. Creating ECS Cluster '${{ env.CLUSTER_NAME }}'..."
            aws ecs create-cluster --cluster-name ${{ env.CLUSTER_NAME }} --region ${{ env.AWS_REGION }} || echo "Failed to create cluster"
          else
            echo "Cluster '${{ env.CLUSTER_NAME }}' already exists."
          fi

      # Step 6: Replace Tokens in Manifests
      - uses: cschleiden/replace-tokens@v1
        with:
          files: '["./python/src/notification/manifests/secret.yaml"]'
          tokenPrefix: __ # optional, default is #{
          tokenSuffix: __ # optional, default is }#
        env:
          MAIL163_ADDRESS: ${{ secrets.MAIL163_ADDRESS }}
          MAIL163_PASSWORD: ${{ secrets.MAIL163_PASSWORD }}

      # Step 8: Apply Kubernetes Manifests
      - name: Apply Kubernetes Manifests
        run: |
          for SERVICE in ${{ env.SERVICES }}; do
            echo "Applying manifests for service: $SERVICE"
            kubectl apply -f ./python/src/$SERVICE/manifests/
          done
